name: Build & Publish Electron Updates (GitHub Releases)

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - package.json
      - apps/client/package.json

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write

env:
  NODE_VERSION: "24"

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.resolve.outputs.tag }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Resolve release tag
        id: resolve
        env:
          EVENT_RELEASE_TAG: ${{ github.event.release.tag_name }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail

          release_tag="${EVENT_RELEASE_TAG:-}"
          repo="${GITHUB_REPOSITORY}"

          version="$(node -p "require('./apps/client/package.json').version")"
          if [[ -z "$version" ]]; then
            echo "Unable to determine app version from apps/client/package.json" >&2
            exit 1
          fi

          declare -a candidates
          candidates=()

          if [[ -n "$release_tag" ]]; then
            candidates+=("$release_tag")
          elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
            candidates+=("$GITHUB_REF_NAME")
          fi

          candidates+=("v$version" "$version")

          resolved_tag=""
          for tag in "${candidates[@]}"; do
            if [[ -z "$tag" ]]; then
              continue
            fi
            if gh release view "$tag" --repo "$repo" >/dev/null 2>&1; then
              resolved_tag="$tag"
              break
            fi
          done

          if [[ -z "$resolved_tag" ]]; then
            resolved_tag="${candidates[0]}"
            if [[ -z "$resolved_tag" ]]; then
              echo "Unable to resolve a release tag candidate" >&2
              exit 1
            fi
            echo "Creating draft release $resolved_tag"
            gh release create "$resolved_tag" \
              --repo "$repo" \
              --draft \
              --title "$resolved_tag" \
              --notes ""
          fi

          echo "Resolved release tag: $resolved_tag"
          printf 'tag=%s\n' "$resolved_tag" >> "$GITHUB_OUTPUT"

  mac-universal:
    name: macOS universal (Apple Silicon only)
    needs: prepare-release
    environment: electron
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'release' && github.event.release.tag_name || github.ref }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21

      # Needed for some x86_64 toolchains invoked during cross-compile. No Intel host required.
      - name: Ensure Rosetta
        shell: bash
        run: |
          set -euo pipefail
          /usr/sbin/softwareupdate --install-rosetta --agree-to-license || true

      - name: Install Rust toolchain (arm64 + x64)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          profile: minimal
          targets: aarch64-apple-darwin, x86_64-apple-darwin

      - name: Install dependencies (bun)
        run: bun install --frozen-lockfile

      - name: Install app deps in apps/client (bun)
        working-directory: apps/client
        run: bun install --frozen-lockfile

      - name: Ensure local production node_modules (apps/client)
        working-directory: apps/client
        run: |
          set -euo pipefail
          bun install --frozen-lockfile --production || true
          if [ ! -d node_modules ]; then
            mkdir -p node_modules
            rsync -aL --delete \
              --exclude='electron' \
              --exclude='electron-builder' \
              --exclude='electron-vite' \
              --exclude='@electron' \
              --exclude='@electron-toolkit' \
              ../../node_modules/ node_modules/ || true
          fi
          if [ ! -d node_modules ]; then
            echo "ERROR: apps/client/node_modules missing." >&2
            exit 1
          fi

      - name: Write .env for build
        shell: bash
        run: |
          cat > .env <<EOF
          NEXT_PUBLIC_CONVEX_URL=${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_STACK_PROJECT_ID=${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
          NEXT_PUBLIC_WWW_ORIGIN=${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
          NEXT_PUBLIC_GITHUB_APP_SLUG=${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
          EOF

      - name: Generate icons (apps/client)
        working-directory: apps/client
        run: bun run ./scripts/generate-icons.mjs

      - name: Prepare macOS entitlements
        run: bash scripts/publish-prepare-macos-entitlements.sh

      # Build your N-API (Node-API) addon for both slices so the packaged app can be universal.
      - name: Build native Rust addon (arm64 + x64)
        working-directory: apps/server/native/core
        shell: bash
        run: |
          set -euo pipefail
          rustup target add x86_64-apple-darwin aarch64-apple-darwin || true
          bunx --bun @napi-rs/cli build --platform --release --target x86_64-apple-darwin
          bunx --bun @napi-rs/cli build --platform --release --target aarch64-apple-darwin

      - name: Prepare signing credentials
        env:
          MAC_CERT_BASE64: ${{ secrets.MAC_CERT_BASE64 }}
          MAC_CERT_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
        shell: bash
        run: |
          set -euo pipefail
          tmpdir_cert="$(mktemp -d)"
          cert_path="$tmpdir_cert/mac_signing_cert.p12"
          node -e "process.stdout.write(Buffer.from(process.env.MAC_CERT_BASE64,'base64'))" > "$cert_path"
          echo "CSC_LINK=$cert_path" >> "$GITHUB_ENV"
          echo "CSC_KEY_PASSWORD=${MAC_CERT_PASSWORD}" >> "$GITHUB_ENV"
          if [[ -n "${APPLE_API_KEY:-}" && ! -f "${APPLE_API_KEY}" ]]; then
            tmpdir_key="$(mktemp -d)"
            key_path="$tmpdir_key/AuthKey_${APPLE_API_KEY_ID:-api}.p8"
            KEY_PATH="$key_path" node -e "const fs=require('fs');let raw=process.env.APPLE_API_KEY||'';if(!raw){process.stderr.write('APPLE_API_KEY is empty\n');process.exit(1)};const unesc=s=>s.includes('\\n')&&!s.includes('\n')?s.replace(/\\\\n/g,'\n'):s;const tryB64=s=>{try{const b=s.replace(/\\s+/g,'');const d=Buffer.from(b,'base64').toString('utf8');if(d.includes('-----BEGIN'))return d;}catch{};return null;};let lit=unesc(raw).replace(/\\r\\n?/g,'\n');let out=lit.includes('-----BEGIN')?lit:(tryB64(raw)||lit);if(!out.endsWith('\n'))out+='\n';fs.writeFileSync(process.env.KEY_PATH,out);try{fs.chmodSync(process.env.KEY_PATH,0o600);}catch{};"
            echo "APPLE_API_KEY=$key_path" >> "$GITHUB_ENV"
          fi

      - name: Build (universal) DMG/ZIP with electron-builder
        working-directory: apps/client
        shell: bash
        run: |
          set -euo pipefail
          ENTITLEMENTS="$PWD/build/entitlements.mac.plist"
          if [[ ! -f "$ENTITLEMENTS" ]]; then
            echo "Entitlements missing at $ENTITLEMENTS" >&2
            exit 1
          fi
          bunx electron-vite build -c electron.vite.config.ts
          # --universal tells electron-builder to produce a Universal 2 app on macOS.
          bunx electron-builder \
            --config electron-builder.json \
            --mac dmg zip \
            --universal \
            --publish never \
            --config.mac.forceCodeSigning=true \
            --config.mac.entitlements="$ENTITLEMENTS" \
            --config.mac.entitlementsInherit="$ENTITLEMENTS" \
            --config.mac.notarize=false

      - name: Verify universal slices in produced app
        working-directory: apps/client/dist-electron
        shell: bash
        run: |
          set -euo pipefail
          # Extract the ZIP to inspect the .app contents without mounting DMG
          ZIP="$(ls -1 *-mac.zip | head -n1 || true)"
          if [[ -z "$ZIP" ]]; then
            echo "No mac.zip found to verify" >&2
            exit 1
          fi
          rm -rf verify && mkdir -p verify
          unzip -q "$ZIP" -d verify
          APP="$(find verify -maxdepth 2 -type d -name '*.app' | head -n1 || true)"
          if [[ -z "$APP" ]]; then
            echo "No .app inside $ZIP" >&2
            exit 1
          fi
          BIN="$(find "$APP/Contents/MacOS" -type f -perm +111 | head -n1 || true)"
          if [[ -z "$BIN" ]]; then
            echo "Main executable not found in $APP" >&2
            exit 1
          fi
          echo "Main binary arches: $(lipo -archs "$BIN")"
          lipo -archs "$BIN" | grep -q "arm64.*x86_64" || { echo "Universal slice missing in main binary"; exit 1; }
          # Check any native modules (*.node). If any are single-arch, fail early.
          bad=0
          while IFS= read -r -d '' so; do
            if ! lipo -archs "$so" 2>/dev/null | grep -q "arm64.*x86_64"; then
              echo "Non-universal native module: $so"
              bad=1
            fi
          done < <(find "$APP" -type f -name '*.node' -print0)
          [[ $bad -eq 0 ]]

      - name: Notarize universal DMG
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
        working-directory: apps/client/dist-electron
        shell: bash
        run: |
          set -euo pipefail
          DMG="$(ls -1 *.dmg | head -n1 || true)"
          if [[ -z "$DMG" ]]; then
            echo "No DMG found in $(pwd)" >&2
            exit 1
          fi
          echo "Submitting $DMG for notarization..."
          set +e
          OUT=$(xcrun notarytool submit "$DMG" --wait --output-format json --key "$APPLE_API_KEY" --key-id "$APPLE_API_KEY_ID" --issuer "$APPLE_API_ISSUER" 2>&1)
          CODE=$?
          set -e
          echo "$OUT" | sed -e 's/^/notarytool: /'
          echo "$OUT" | grep -qi '"status" *: *"Accepted"\|status: Accepted\|Accepted' || { echo "Notarization failed"; exit 1; }

      - name: Staple and prepare update manifest
        working-directory: apps/client/dist-electron
        shell: bash
        run: |
          set -euo pipefail
          APP="$(find . -maxdepth 2 -type d -name '*.app' | head -n1 || true)"
          DMG="$(ls -1 *.dmg 2>/dev/null | head -n1 || true)"
          if [[ -n "$APP" ]]; then xcrun stapler staple "$APP" || true; fi
          if [[ -n "$DMG" ]]; then xcrun stapler staple "$DMG" || true; fi
          if [[ -f "latest-mac.yml" ]]; then
            rm -f latest-universal-mac.yml
            mv latest-mac.yml latest-universal-mac.yml
          fi

      - name: Publish notarized macOS universal artifacts to GitHub Releases
        env:
          GH_TOKEN: ${{ github.token }}
          RELEASE_TAG: ${{ needs.prepare-release.outputs.release_tag }}
          REPO: ${{ github.repository }}
        working-directory: apps/client/dist-electron
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          artifacts=( *.dmg *.zip *.blockmap latest-*.yml )
          if [[ ${#artifacts[@]} -eq 0 ]]; then
            echo "No universal artifacts found to upload" >&2
            exit 1
          fi
          for artifact in "${artifacts[@]}"; do
            if [[ "$artifact" == *.dmg ]]; then
              base="${artifact%.dmg}"
              renamed="${base}-universal.dmg"
              echo "Uploading $artifact as $renamed"
              gh release upload "$RELEASE_TAG" "$artifact#$renamed" --repo "$REPO" --clobber
            else
              echo "Uploading $artifact"
              gh release upload "$RELEASE_TAG" "$artifact" --repo "$REPO" --clobber
            fi
          done

  windows-x64:
    name: Windows x64
    needs: prepare-release
    environment: electron
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'release' && github.event.release.tag_name || github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          profile: minimal
          targets: x86_64-pc-windows-msvc
      - name: Install dependencies (bun)
        run: bun install --frozen-lockfile
      - name: Write .env for build
        shell: bash
        run: |
          cat > .env <<EOF
          NEXT_PUBLIC_CONVEX_URL=${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_STACK_PROJECT_ID=${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
          NEXT_PUBLIC_WWW_ORIGIN=${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
          NEXT_PUBLIC_GITHUB_APP_SLUG=${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
          EOF
      - name: Build native Rust addon
        working-directory: apps/server/native/core
        shell: pwsh
        run: bunx --bun @napi-rs/cli build --platform --release
      - name: Generate icons
        working-directory: apps/client
        run: bun run ./scripts/generate-icons.mjs
      - name: Build & publish Windows x64 to GitHub Releases
        env:
          GH_TOKEN: ${{ github.token }}
          PUBLISH_FLAG: ${{ github.event_name == 'release' && 'always' || 'never' }}
        working-directory: apps/client
        run: bunx electron-vite build -c electron.vite.config.ts && bunx electron-builder --config electron-builder.json --win --x64 --publish always --config.publish.provider=github --config.publish.owner="${{ github.repository_owner }}" --config.publish.repo="${{ github.event.repository.name }}"

  linux-x64:
    name: Linux x64
    needs: prepare-release
    environment: electron
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'release' && github.event.release.tag_name || github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          profile: minimal
          targets: x86_64-unknown-linux-gnu
      - name: Install dependencies (bun)
        run: bun install --frozen-lockfile
      - name: Write .env for build
        shell: bash
        run: |
          cat > .env <<EOF
          NEXT_PUBLIC_CONVEX_URL=${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_STACK_PROJECT_ID=${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
          NEXT_PUBLIC_WWW_ORIGIN=${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
          NEXT_PUBLIC_GITHUB_APP_SLUG=${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
          EOF
      - name: Build native Rust addon
        working-directory: apps/server/native/core
        shell: bash
        run: bunx --bun @napi-rs/cli build --platform --release
      - name: Generate icons
        working-directory: apps/client
        run: bun run ./scripts/generate-icons.mjs
      - name: Build & publish Linux AppImage x64 to GitHub Releases
        env:
          GH_TOKEN: ${{ github.token }}
          PUBLISH_FLAG: ${{ github.event_name == 'release' && 'always' || 'never' }}
        working-directory: apps/client
        run: bunx electron-vite build -c electron.vite.config.ts && bunx electron-builder --config electron-builder.json --linux AppImage --x64 --publish always --config.publish.provider=github --config.publish.owner="${{ github.repository_owner }}" --config.publish.repo="${{ github.event.repository.name }}"
