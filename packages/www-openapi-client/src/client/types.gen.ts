// This file is auto-generated by @hey-api/openapi-ts

export type Health = {
    status: 'healthy' | 'unhealthy';
    timestamp: string;
    version: string;
    /**
     * Uptime in seconds
     */
    uptime: number;
};

export type User = {
    id: string;
    name: string;
    email: string;
    age?: number;
    createdAt: string;
};

export type UserList = {
    users: Array<User>;
    total: number;
    page: number;
    pageSize: number;
};

export type _Error = {
    code: number;
    message: string;
    details?: unknown;
};

export type ValidationError = {
    code: 422;
    message: string;
    errors: Array<{
        path: Array<string | number>;
        message: string;
    }>;
};

export type CreateUser = {
    name: string;
    email: string;
    age?: number;
};

export type UpdateUser = {
    name?: string;
    email?: string;
    age?: number;
};

export type Book = {
    id: string;
    title: string;
    author: string;
    isbn?: string;
    publishedYear: number;
    genre: 'fiction' | 'non-fiction' | 'science' | 'history' | 'biography';
    available: boolean;
};

export type BookList = {
    books: Array<Book>;
    total: number;
};

export type CreateBook = {
    title: string;
    author: string;
    isbn?: string;
    publishedYear: number;
    genre: 'fiction' | 'non-fiction' | 'science' | 'history' | 'biography';
};

export type DevServerResponse = {
    instanceId: string;
    vscodeUrl: string;
    workerUrl: string;
    vncUrl: string;
    cdpUrl: string;
    status: string;
    taskId: string;
    terminalCreated: boolean;
};

export type ErrorResponse = {
    code: number;
    message: string;
    error?: string;
};

export type GithubRepo = {
    name: string;
    full_name: string;
    private: boolean;
    updated_at?: string | null;
    pushed_at?: string | null;
};

export type GithubReposResponse = {
    repos: Array<GithubRepo>;
};

export type GithubPullRequestItem = {
    id: number;
    number: number;
    title: string;
    state: 'open' | 'closed';
    user?: {
        login: string;
        id: number;
        avatar_url?: string;
    };
    repository_full_name: string;
    html_url: string;
    created_at?: string;
    updated_at?: string;
    comments?: number;
};

export type GithubPullRequestsResponse = {
    total_count: number;
    pullRequests: Array<GithubPullRequestItem>;
};

export type GithubPrsBackfillBody = {
    /**
     * Team slug or UUID
     */
    team: string;
    /**
     * GitHub PR URL like https://github.com/{owner}/{repo}/pull/{number}
     */
    url: string;
};

export type GithubPrsBackfillRepoBody = {
    /**
     * Team slug or UUID
     */
    team: string;
    /**
     * owner/repo
     */
    repoFullName: string;
    /**
     * PR state to backfill (default all)
     */
    state?: 'open' | 'closed' | 'all';
    /**
     * Safety cap on number of pages (default 50)
     */
    maxPages?: number;
};

export type GithubPrFile = {
    filename: string;
    status: string;
    sha?: string;
    additions?: number;
    deletions?: number;
    changes?: number;
    previous_filename?: string;
    patch?: string;
    size?: number;
    contents?: {
        encoding: 'base64';
        content: string;
    };
    truncated?: boolean;
    baseContents?: {
        encoding: 'base64';
        content: string;
    };
    truncatedBase?: boolean;
    sizeBase?: number;
    html_url?: string;
    raw_url?: string;
    blob_url?: string;
};

export type GithubPrCodeResponse = {
    repoFullName: string;
    number: number;
    head: {
        ref?: string;
        sha?: string;
    };
    base: {
        ref?: string;
        sha?: string;
    };
    files: Array<GithubPrFile>;
};

export type GithubOpenPrResponse = {
    success: boolean;
    results: Array<{
        repoFullName: string;
        url?: string;
        number?: number;
        state: 'none' | 'draft' | 'open' | 'merged' | 'closed' | 'unknown';
        isDraft?: boolean;
        error?: string;
    }>;
    aggregate: {
        state: 'none' | 'draft' | 'open' | 'merged' | 'closed' | 'unknown';
        isDraft: boolean;
        mergeStatus: 'none' | 'pr_draft' | 'pr_open' | 'pr_merged' | 'pr_closed';
        url?: string;
        number?: number;
    };
    error?: string;
};

export type GithubOpenPrRequest = {
    teamSlugOrId: string;
    taskRunId: string;
};

export type GithubMergePrRequest = {
    teamSlugOrId: string;
    taskRunId: string;
    method: 'squash' | 'rebase' | 'merge';
};

export type GithubClosePrRequest = {
    teamSlugOrId: string;
    owner: string;
    repo: string;
    number: number;
};

export type GithubMergePrSimpleRequest = {
    teamSlugOrId: string;
    owner: string;
    repo: string;
    number: number;
    method: 'squash' | 'rebase' | 'merge';
};

export type GithubPrsFilesResponse = {
    repoFullName: string;
    number: number;
    head: {
        ref?: string;
        sha?: string;
    };
    base: {
        ref?: string;
        sha?: string;
    };
    files: Array<{
        filename: string;
        previous_filename?: string;
        status: string;
        additions?: number;
        deletions?: number;
        changes?: number;
        patch?: string;
    }>;
};

export type GithubPrsFileContentsResponse = {
    path: string;
    head?: {
        encoding: 'base64';
        content: string;
        size?: number;
    };
    base?: {
        encoding: 'base64';
        content: string;
        size?: number;
    };
    truncatedHead?: boolean;
    truncatedBase?: boolean;
};

export type GithubPrsFileContentsBatchResponse = {
    repoFullName: string;
    number: number;
    head: {
        ref?: string;
        sha?: string;
    };
    base: {
        ref?: string;
        sha?: string;
    };
    results: Array<{
        path: string;
        head?: {
            encoding: 'base64';
            content: string;
            size?: number;
        };
        base?: {
            encoding: 'base64';
            content: string;
            size?: number;
        };
        truncatedHead?: boolean;
        truncatedBase?: boolean;
        headSize?: number;
        baseSize?: number;
    }>;
};

export type GithubPrsFileContentsBatchBody = {
    team: string;
    owner: string;
    repo: string;
    number: number;
    files: Array<{
        path: string;
        previous_filename?: string;
    }>;
    which?: 'both' | 'head' | 'base';
    maxFileBytes?: number;
};

export type SetupInstanceResponse = {
    instanceId: string;
    vscodeUrl: string;
    clonedRepos: Array<string>;
    removedRepos: Array<string>;
};

export type SetupInstanceBody = {
    teamSlugOrId: string;
    instanceId?: string;
    selectedRepos?: Array<string>;
    ttlSeconds?: number;
    snapshotId?: 'snapshot_67vocr5m' | 'snapshot_x3udmsgy';
};

export type CreateEnvironmentResponse = {
    id: string;
    snapshotId: string;
};

export type CreateEnvironmentBody = {
    teamSlugOrId: string;
    name: string;
    morphInstanceId: string;
    envVarsContent: string;
    selectedRepos?: Array<string>;
    description?: string;
    maintenanceScript?: string;
    devScript?: string;
    exposedPorts?: Array<number>;
};

export type GetEnvironmentResponse = {
    id: string;
    name: string;
    morphSnapshotId: string;
    dataVaultKey: string;
    selectedRepos?: Array<string>;
    description?: string;
    maintenanceScript?: string;
    devScript?: string;
    exposedPorts?: Array<number>;
    createdAt: number;
    updatedAt: number;
};

export type ListEnvironmentsResponse = Array<GetEnvironmentResponse>;

export type GetEnvironmentVarsResponse = {
    envVarsContent: string;
};

export type UpdateEnvironmentBody = {
    teamSlugOrId: string;
    name?: string;
    description?: string;
    maintenanceScript?: string;
    devScript?: string;
};

export type ExposedService = {
    port: number;
    url: string;
};

export type UpdateEnvironmentPortsResponse = {
    exposedPorts: Array<number>;
    services?: Array<ExposedService>;
};

export type UpdateEnvironmentPortsBody = {
    teamSlugOrId: string;
    ports: Array<number>;
    morphInstanceId?: string;
};

export type SnapshotVersionResponse = {
    id: string;
    version: number;
    morphSnapshotId: string;
    createdAt: number;
    createdByUserId: string;
    label?: string;
    isActive: boolean;
    maintenanceScript?: string;
    devScript?: string;
};

export type ListSnapshotVersionsResponse = Array<SnapshotVersionResponse>;

export type CreateSnapshotVersionResponse = {
    snapshotVersionId: string;
    snapshotId: string;
    version: number;
};

export type CreateSnapshotVersionBody = {
    teamSlugOrId: string;
    morphInstanceId: string;
    label?: string;
    activate?: boolean;
    maintenanceScript?: string;
    devScript?: string;
};

export type ActivateSnapshotVersionResponse = {
    morphSnapshotId: string;
    version: number;
};

export type ActivateSnapshotVersionBody = {
    teamSlugOrId: string;
};

export type StartSandboxResponse = {
    instanceId: string;
    vscodeUrl: string;
    workerUrl: string;
    provider?: 'morph';
};

export type StartSandboxBody = {
    teamSlugOrId: string;
    environmentId?: string;
    snapshotId?: string;
    ttlSeconds?: number;
    metadata?: {
        [key: string]: string;
    };
    taskRunId?: string;
    taskRunJwt?: string;
    repoUrl?: string;
    branch?: string;
    newBranch?: string;
    depth?: number;
};

export type UpdateSandboxEnvResponse = {
    applied: true;
};

export type UpdateSandboxEnvBody = {
    teamSlugOrId: string;
    envVarsContent: string;
};

export type CreateTeamResponse = {
    /**
     * Stack team ID
     */
    teamId: string;
    /**
     * Display name saved in Stack
     */
    displayName: string;
    /**
     * Slug stored in Convex
     */
    slug: string;
    /**
     * Number of invite emails sent
     */
    invitesSent: number;
};

export type CreateTeamErrorResponse = {
    code: number;
    message: string;
};

export type CreateTeamRequest = {
    /**
     * Human-friendly team name
     */
    displayName: string;
    /**
     * Slug used in URLs. Lowercase letters, numbers, and hyphens. Must start and end with a letter or number.
     */
    slug: string;
    /**
     * Optional list of teammate emails to invite
     */
    inviteEmails?: Array<string>;
};

export type GenerateBranchesResponse = {
    branchNames: Array<string>;
    baseBranchName: string;
    prTitle?: string;
    usedFallback: boolean;
    providerName: string | null;
};

export type GenerateBranchesBody = {
    teamSlugOrId: string;
    taskDescription?: string;
    prTitle?: string;
    count?: number;
    uniqueId?: string;
};

export type GetApiHealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/health';
};

export type GetApiHealthResponses = {
    /**
     * Service is healthy
     */
    200: Health;
};

export type GetApiHealthResponse = GetApiHealthResponses[keyof GetApiHealthResponses];

export type GetApiUsersData = {
    body?: never;
    path?: never;
    query?: {
        page?: string;
        pageSize?: string;
        search?: string;
    };
    url: '/api/users';
};

export type GetApiUsersResponses = {
    /**
     * List of users
     */
    200: UserList;
};

export type GetApiUsersResponse = GetApiUsersResponses[keyof GetApiUsersResponses];

export type PostApiUsersData = {
    body: CreateUser;
    path?: never;
    query?: never;
    url: '/api/users';
};

export type PostApiUsersErrors = {
    /**
     * Validation error
     */
    422: ValidationError;
};

export type PostApiUsersError = PostApiUsersErrors[keyof PostApiUsersErrors];

export type PostApiUsersResponses = {
    /**
     * User created
     */
    201: User;
};

export type PostApiUsersResponse = PostApiUsersResponses[keyof PostApiUsersResponses];

export type DeleteApiUsersByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/{id}';
};

export type DeleteApiUsersByIdErrors = {
    /**
     * User not found
     */
    404: _Error;
};

export type DeleteApiUsersByIdError = DeleteApiUsersByIdErrors[keyof DeleteApiUsersByIdErrors];

export type DeleteApiUsersByIdResponses = {
    /**
     * User deleted
     */
    204: void;
};

export type DeleteApiUsersByIdResponse = DeleteApiUsersByIdResponses[keyof DeleteApiUsersByIdResponses];

export type GetApiUsersByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/{id}';
};

export type GetApiUsersByIdErrors = {
    /**
     * User not found
     */
    404: _Error;
};

export type GetApiUsersByIdError = GetApiUsersByIdErrors[keyof GetApiUsersByIdErrors];

export type GetApiUsersByIdResponses = {
    /**
     * The user
     */
    200: User;
};

export type GetApiUsersByIdResponse = GetApiUsersByIdResponses[keyof GetApiUsersByIdResponses];

export type PatchApiUsersByIdData = {
    body: UpdateUser;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/{id}';
};

export type PatchApiUsersByIdErrors = {
    /**
     * User not found
     */
    404: _Error;
    /**
     * Validation error
     */
    422: ValidationError;
};

export type PatchApiUsersByIdError = PatchApiUsersByIdErrors[keyof PatchApiUsersByIdErrors];

export type PatchApiUsersByIdResponses = {
    /**
     * User updated
     */
    200: User;
};

export type PatchApiUsersByIdResponse = PatchApiUsersByIdResponses[keyof PatchApiUsersByIdResponses];

export type GetApiBooksData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/books';
};

export type GetApiBooksResponses = {
    /**
     * List of books
     */
    200: BookList;
};

export type GetApiBooksResponse = GetApiBooksResponses[keyof GetApiBooksResponses];

export type PostApiBooksData = {
    body: CreateBook;
    path?: never;
    query?: never;
    url: '/api/books';
};

export type PostApiBooksErrors = {
    /**
     * Validation error
     */
    422: ValidationError;
};

export type PostApiBooksError = PostApiBooksErrors[keyof PostApiBooksErrors];

export type PostApiBooksResponses = {
    /**
     * Book created
     */
    201: Book;
};

export type PostApiBooksResponse = PostApiBooksResponses[keyof PostApiBooksResponses];

export type GetApiBooksByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/books/{id}';
};

export type GetApiBooksByIdErrors = {
    /**
     * Book not found
     */
    404: _Error;
};

export type GetApiBooksByIdError = GetApiBooksByIdErrors[keyof GetApiBooksByIdErrors];

export type GetApiBooksByIdResponses = {
    /**
     * The book
     */
    200: Book;
};

export type GetApiBooksByIdResponse = GetApiBooksByIdResponses[keyof GetApiBooksByIdResponses];

export type PostApiBooksByIdBorrowData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/books/{id}/borrow';
};

export type PostApiBooksByIdBorrowErrors = {
    /**
     * Book not available
     */
    400: _Error;
    /**
     * Book not found
     */
    404: _Error;
};

export type PostApiBooksByIdBorrowError = PostApiBooksByIdBorrowErrors[keyof PostApiBooksByIdBorrowErrors];

export type PostApiBooksByIdBorrowResponses = {
    /**
     * Book borrowed successfully
     */
    200: Book;
};

export type PostApiBooksByIdBorrowResponse = PostApiBooksByIdBorrowResponses[keyof PostApiBooksByIdBorrowResponses];

export type PostApiBooksByIdReturnData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/books/{id}/return';
};

export type PostApiBooksByIdReturnErrors = {
    /**
     * Book already available
     */
    400: _Error;
    /**
     * Book not found
     */
    404: _Error;
};

export type PostApiBooksByIdReturnError = PostApiBooksByIdReturnErrors[keyof PostApiBooksByIdReturnErrors];

export type PostApiBooksByIdReturnResponses = {
    /**
     * Book returned successfully
     */
    200: Book;
};

export type PostApiBooksByIdReturnResponse = PostApiBooksByIdReturnResponses[keyof PostApiBooksByIdReturnResponses];

export type PostApiDevServerStartData = {
    /**
     * Start a new development server instance with the specified task
     */
    body: {
        /**
         * GitHub repository URL
         */
        repoUrl: string;
        /**
         * Git branch to checkout
         */
        branch?: string;
        /**
         * Description of the task to perform
         */
        taskDescription: string;
        /**
         * Full name of the project (owner/repo)
         */
        projectFullName: string;
        /**
         * Unique task identifier
         */
        taskId: string;
        /**
         * List of AI agents to use
         */
        selectedAgents?: Array<string>;
        /**
         * Whether to run in cloud mode
         */
        isCloudMode?: boolean;
        /**
         * Array of images to include with the task
         */
        images?: Array<{
            src: string;
            fileName?: string;
            altText: string;
        }>;
        /**
         * UI theme preference
         */
        theme?: 'dark' | 'light' | 'system';
        /**
         * Morph snapshot ID to use for the instance
         */
        snapshotId?: string;
        /**
         * Time to live in seconds (default 30 minutes)
         */
        ttlSeconds?: number;
    };
    path?: never;
    query?: never;
    url: '/api/dev-server/start';
};

export type PostApiDevServerStartErrors = {
    /**
     * Failed to start development server
     */
    500: ErrorResponse;
};

export type PostApiDevServerStartError = PostApiDevServerStartErrors[keyof PostApiDevServerStartErrors];

export type PostApiDevServerStartResponses = {
    /**
     * Development server started successfully
     */
    200: DevServerResponse;
};

export type PostApiDevServerStartResponse = PostApiDevServerStartResponses[keyof PostApiDevServerStartResponses];

export type GetApiIntegrationsGithubReposData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Team slug or UUID
         */
        team: string;
        /**
         * GitHub App installation ID to query
         */
        installationId?: number | null;
        /**
         * Optional search term to filter repos by name
         */
        search?: string;
        /**
         * 1-based page index (default 1)
         */
        page?: number;
    };
    url: '/api/integrations/github/repos';
};

export type GetApiIntegrationsGithubReposErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Not configured
     */
    501: unknown;
};

export type GetApiIntegrationsGithubReposResponses = {
    /**
     * OK
     */
    200: GithubReposResponse;
};

export type GetApiIntegrationsGithubReposResponse = GetApiIntegrationsGithubReposResponses[keyof GetApiIntegrationsGithubReposResponses];

export type GetApiIntegrationsGithubPrsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Team slug or UUID
         */
        team: string;
        /**
         * GitHub App installation ID to query
         */
        installationId?: number | null;
        /**
         * Optional search term to filter by title or author
         */
        q?: string;
        /**
         * Filter PRs by state (default open)
         */
        state?: 'open' | 'closed' | 'all';
        /**
         * 1-based page index (default 1)
         */
        page?: number;
        /**
         * Results per page (default 20, max 100)
         */
        per_page?: number;
    };
    url: '/api/integrations/github/prs';
};

export type GetApiIntegrationsGithubPrsErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Not configured
     */
    501: unknown;
};

export type GetApiIntegrationsGithubPrsResponses = {
    /**
     * OK
     */
    200: GithubPullRequestsResponse;
};

export type GetApiIntegrationsGithubPrsResponse = GetApiIntegrationsGithubPrsResponses[keyof GetApiIntegrationsGithubPrsResponses];

export type PostApiIntegrationsGithubPrsBackfillData = {
    body: GithubPrsBackfillBody;
    path?: never;
    query?: never;
    url: '/api/integrations/github/prs/backfill';
};

export type PostApiIntegrationsGithubPrsBackfillErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Not configured
     */
    501: unknown;
};

export type PostApiIntegrationsGithubPrsBackfillResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostApiIntegrationsGithubPrsBackfillRepoData = {
    body: GithubPrsBackfillRepoBody;
    path?: never;
    query?: never;
    url: '/api/integrations/github/prs/backfill-repo';
};

export type PostApiIntegrationsGithubPrsBackfillRepoErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Not configured
     */
    501: unknown;
};

export type PostApiIntegrationsGithubPrsBackfillRepoResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetApiIntegrationsGithubPrsCodeData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Team slug or UUID
         */
        team: string;
        /**
         * GitHub owner/org
         */
        owner: string;
        /**
         * GitHub repo name
         */
        repo: string;
        /**
         * PR number
         */
        number: number;
        /**
         * If true, include head file contents (base64)
         */
        includeContents?: boolean | null;
        /**
         * If true, include unified diff patch hunks
         */
        includePatch?: boolean | null;
        /**
         * Skip fetching contents when file size exceeds this (default 1MB)
         */
        maxFileBytes?: number;
        /**
         * Paginate PR files up to this many pages (default 10)
         */
        maxPages?: number;
    };
    url: '/api/integrations/github/prs/code';
};

export type GetApiIntegrationsGithubPrsCodeErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Not found
     */
    404: unknown;
};

export type GetApiIntegrationsGithubPrsCodeResponses = {
    /**
     * OK
     */
    200: GithubPrCodeResponse;
};

export type GetApiIntegrationsGithubPrsCodeResponse = GetApiIntegrationsGithubPrsCodeResponses[keyof GetApiIntegrationsGithubPrsCodeResponses];

export type PostApiIntegrationsGithubPrsOpenData = {
    body: GithubOpenPrRequest;
    path?: never;
    query?: never;
    url: '/api/integrations/github/prs/open';
};

export type PostApiIntegrationsGithubPrsOpenErrors = {
    /**
     * Invalid request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Task run not found
     */
    404: unknown;
    /**
     * Failed to create or update PRs
     */
    500: unknown;
};

export type PostApiIntegrationsGithubPrsOpenResponses = {
    /**
     * PRs created or updated
     */
    200: GithubOpenPrResponse;
};

export type PostApiIntegrationsGithubPrsOpenResponse = PostApiIntegrationsGithubPrsOpenResponses[keyof PostApiIntegrationsGithubPrsOpenResponses];

export type PostApiIntegrationsGithubPrsMergeData = {
    body: GithubMergePrRequest;
    path?: never;
    query?: never;
    url: '/api/integrations/github/prs/merge';
};

export type PostApiIntegrationsGithubPrsMergeErrors = {
    /**
     * Invalid request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Task run not found
     */
    404: unknown;
    /**
     * Failed to merge PRs
     */
    500: unknown;
};

export type PostApiIntegrationsGithubPrsMergeResponses = {
    /**
     * PRs merged
     */
    200: GithubOpenPrResponse;
};

export type PostApiIntegrationsGithubPrsMergeResponse = PostApiIntegrationsGithubPrsMergeResponses[keyof PostApiIntegrationsGithubPrsMergeResponses];

export type PostApiIntegrationsGithubPrsCloseData = {
    body: GithubClosePrRequest;
    path?: never;
    query?: never;
    url: '/api/integrations/github/prs/close';
};

export type PostApiIntegrationsGithubPrsCloseErrors = {
    /**
     * Invalid request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Failed to close PR
     */
    500: unknown;
};

export type PostApiIntegrationsGithubPrsCloseResponses = {
    /**
     * PR closed successfully
     */
    200: {
        success: boolean;
        message: string;
    };
};

export type PostApiIntegrationsGithubPrsCloseResponse = PostApiIntegrationsGithubPrsCloseResponses[keyof PostApiIntegrationsGithubPrsCloseResponses];

export type PostApiIntegrationsGithubPrsMergeSimpleData = {
    body: GithubMergePrSimpleRequest;
    path?: never;
    query?: never;
    url: '/api/integrations/github/prs/merge-simple';
};

export type PostApiIntegrationsGithubPrsMergeSimpleErrors = {
    /**
     * Invalid request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Failed to merge PR
     */
    500: unknown;
};

export type PostApiIntegrationsGithubPrsMergeSimpleResponses = {
    /**
     * PR merged successfully
     */
    200: {
        success: boolean;
        message: string;
    };
};

export type PostApiIntegrationsGithubPrsMergeSimpleResponse = PostApiIntegrationsGithubPrsMergeSimpleResponses[keyof PostApiIntegrationsGithubPrsMergeSimpleResponses];

export type GetApiIntegrationsGithubPrsRawData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Team slug or UUID
         */
        team: string;
        /**
         * GitHub owner/org
         */
        owner: string;
        /**
         * GitHub repo name
         */
        repo: string;
        /**
         * PR number
         */
        number: number;
        /**
         * Return .patch or .diff format (default patch)
         */
        format?: 'patch' | 'diff';
    };
    url: '/api/integrations/github/prs/raw';
};

export type GetApiIntegrationsGithubPrsRawErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Not found
     */
    404: unknown;
};

export type GetApiIntegrationsGithubPrsRawResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetApiIntegrationsGithubPrsRawResponse = GetApiIntegrationsGithubPrsRawResponses[keyof GetApiIntegrationsGithubPrsRawResponses];

export type GetApiIntegrationsGithubPrsFilesData = {
    body?: never;
    path?: never;
    query: {
        team: string;
        owner: string;
        repo: string;
        number: number;
        maxPages?: number;
    };
    url: '/api/integrations/github/prs/files';
};

export type GetApiIntegrationsGithubPrsFilesErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Not found
     */
    404: unknown;
};

export type GetApiIntegrationsGithubPrsFilesResponses = {
    /**
     * OK
     */
    200: GithubPrsFilesResponse;
};

export type GetApiIntegrationsGithubPrsFilesResponse = GetApiIntegrationsGithubPrsFilesResponses[keyof GetApiIntegrationsGithubPrsFilesResponses];

export type GetApiIntegrationsGithubPrsFileContentsData = {
    body?: never;
    path?: never;
    query: {
        team: string;
        owner: string;
        repo: string;
        number: number;
        path: string;
        previous_filename?: string;
        which?: 'both' | 'head' | 'base';
        maxFileBytes?: number;
    };
    url: '/api/integrations/github/prs/file-contents';
};

export type GetApiIntegrationsGithubPrsFileContentsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Not found
     */
    404: unknown;
};

export type GetApiIntegrationsGithubPrsFileContentsResponses = {
    /**
     * OK
     */
    200: GithubPrsFileContentsResponse;
};

export type GetApiIntegrationsGithubPrsFileContentsResponse = GetApiIntegrationsGithubPrsFileContentsResponses[keyof GetApiIntegrationsGithubPrsFileContentsResponses];

export type PostApiIntegrationsGithubPrsFileContentsBatchData = {
    body: GithubPrsFileContentsBatchBody;
    path?: never;
    query?: never;
    url: '/api/integrations/github/prs/file-contents/batch';
};

export type PostApiIntegrationsGithubPrsFileContentsBatchErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Not found
     */
    404: unknown;
};

export type PostApiIntegrationsGithubPrsFileContentsBatchResponses = {
    /**
     * OK
     */
    200: GithubPrsFileContentsBatchResponse;
};

export type PostApiIntegrationsGithubPrsFileContentsBatchResponse = PostApiIntegrationsGithubPrsFileContentsBatchResponses[keyof PostApiIntegrationsGithubPrsFileContentsBatchResponses];

export type PostApiMorphSetupInstanceData = {
    body: SetupInstanceBody;
    path?: never;
    query?: never;
    url: '/api/morph/setup-instance';
};

export type PostApiMorphSetupInstanceErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Failed to setup instance
     */
    500: unknown;
};

export type PostApiMorphSetupInstanceResponses = {
    /**
     * Instance setup successfully
     */
    200: SetupInstanceResponse;
};

export type PostApiMorphSetupInstanceResponse = PostApiMorphSetupInstanceResponses[keyof PostApiMorphSetupInstanceResponses];

export type GetApiIframePreflightData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Absolute HTTP(S) URL to check before embedding in an iframe.
         */
        url: string;
    };
    url: '/api/iframe/preflight';
};

export type GetApiIframePreflightErrors = {
    /**
     * The provided URL was not an HTTP(S) URL.
     */
    400: unknown;
    /**
     * Request is missing valid authentication.
     */
    401: unknown;
    /**
     * The target host is not permitted for probing.
     */
    403: unknown;
};

export type GetApiIframePreflightResponses = {
    /**
     * Text/event-stream payload where each event contains JSON encoded status updates and the final result.
     */
    200: string;
};

export type GetApiIframePreflightResponse = GetApiIframePreflightResponses[keyof GetApiIframePreflightResponses];

export type GetApiEnvironmentsData = {
    body?: never;
    path?: never;
    query: {
        teamSlugOrId: string;
    };
    url: '/api/environments';
};

export type GetApiEnvironmentsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Failed to list environments
     */
    500: unknown;
};

export type GetApiEnvironmentsResponses = {
    /**
     * Environments retrieved successfully
     */
    200: ListEnvironmentsResponse;
};

export type GetApiEnvironmentsResponse = GetApiEnvironmentsResponses[keyof GetApiEnvironmentsResponses];

export type PostApiEnvironmentsData = {
    body: CreateEnvironmentBody;
    path?: never;
    query?: never;
    url: '/api/environments';
};

export type PostApiEnvironmentsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Failed to create environment
     */
    500: unknown;
};

export type PostApiEnvironmentsResponses = {
    /**
     * Environment created successfully
     */
    200: CreateEnvironmentResponse;
};

export type PostApiEnvironmentsResponse = PostApiEnvironmentsResponses[keyof PostApiEnvironmentsResponses];

export type DeleteApiEnvironmentsByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query: {
        teamSlugOrId: string;
    };
    url: '/api/environments/{id}';
};

export type DeleteApiEnvironmentsByIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Environment not found
     */
    404: unknown;
    /**
     * Failed to delete environment
     */
    500: unknown;
};

export type DeleteApiEnvironmentsByIdResponses = {
    /**
     * Environment deleted successfully
     */
    204: void;
};

export type DeleteApiEnvironmentsByIdResponse = DeleteApiEnvironmentsByIdResponses[keyof DeleteApiEnvironmentsByIdResponses];

export type GetApiEnvironmentsByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query: {
        teamSlugOrId: string;
    };
    url: '/api/environments/{id}';
};

export type GetApiEnvironmentsByIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Environment not found
     */
    404: unknown;
    /**
     * Failed to get environment
     */
    500: unknown;
};

export type GetApiEnvironmentsByIdResponses = {
    /**
     * Environment retrieved successfully
     */
    200: GetEnvironmentResponse;
};

export type GetApiEnvironmentsByIdResponse = GetApiEnvironmentsByIdResponses[keyof GetApiEnvironmentsByIdResponses];

export type PatchApiEnvironmentsByIdData = {
    body: UpdateEnvironmentBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/environments/{id}';
};

export type PatchApiEnvironmentsByIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Environment not found
     */
    404: unknown;
    /**
     * Failed to update environment
     */
    500: unknown;
};

export type PatchApiEnvironmentsByIdResponses = {
    /**
     * Environment updated successfully
     */
    200: GetEnvironmentResponse;
};

export type PatchApiEnvironmentsByIdResponse = PatchApiEnvironmentsByIdResponses[keyof PatchApiEnvironmentsByIdResponses];

export type GetApiEnvironmentsByIdVarsData = {
    body?: never;
    path: {
        id: string;
    };
    query: {
        teamSlugOrId: string;
    };
    url: '/api/environments/{id}/vars';
};

export type GetApiEnvironmentsByIdVarsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Environment not found
     */
    404: unknown;
    /**
     * Failed to get environment variables
     */
    500: unknown;
};

export type GetApiEnvironmentsByIdVarsResponses = {
    /**
     * Environment variables retrieved successfully
     */
    200: GetEnvironmentVarsResponse;
};

export type GetApiEnvironmentsByIdVarsResponse = GetApiEnvironmentsByIdVarsResponses[keyof GetApiEnvironmentsByIdVarsResponses];

export type PatchApiEnvironmentsByIdPortsData = {
    body: UpdateEnvironmentPortsBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/environments/{id}/ports';
};

export type PatchApiEnvironmentsByIdPortsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Environment not found
     */
    404: unknown;
    /**
     * Failed to update environment ports
     */
    500: unknown;
};

export type PatchApiEnvironmentsByIdPortsResponses = {
    /**
     * Exposed ports updated successfully
     */
    200: UpdateEnvironmentPortsResponse;
};

export type PatchApiEnvironmentsByIdPortsResponse = PatchApiEnvironmentsByIdPortsResponses[keyof PatchApiEnvironmentsByIdPortsResponses];

export type GetApiEnvironmentsByIdSnapshotsData = {
    body?: never;
    path: {
        id: string;
    };
    query: {
        teamSlugOrId: string;
    };
    url: '/api/environments/{id}/snapshots';
};

export type GetApiEnvironmentsByIdSnapshotsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Environment not found
     */
    404: unknown;
    /**
     * Failed to list snapshot versions
     */
    500: unknown;
};

export type GetApiEnvironmentsByIdSnapshotsResponses = {
    /**
     * Snapshot versions retrieved successfully
     */
    200: ListSnapshotVersionsResponse;
};

export type GetApiEnvironmentsByIdSnapshotsResponse = GetApiEnvironmentsByIdSnapshotsResponses[keyof GetApiEnvironmentsByIdSnapshotsResponses];

export type PostApiEnvironmentsByIdSnapshotsData = {
    body: CreateSnapshotVersionBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/environments/{id}/snapshots';
};

export type PostApiEnvironmentsByIdSnapshotsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Environment not found
     */
    404: unknown;
    /**
     * Failed to create snapshot version
     */
    500: unknown;
};

export type PostApiEnvironmentsByIdSnapshotsResponses = {
    /**
     * Snapshot version created successfully
     */
    200: CreateSnapshotVersionResponse;
};

export type PostApiEnvironmentsByIdSnapshotsResponse = PostApiEnvironmentsByIdSnapshotsResponses[keyof PostApiEnvironmentsByIdSnapshotsResponses];

export type PostApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivateData = {
    body: ActivateSnapshotVersionBody;
    path: {
        id: string;
        snapshotVersionId: string;
    };
    query?: never;
    url: '/api/environments/{id}/snapshots/{snapshotVersionId}/activate';
};

export type PostApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivateErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Snapshot version not found
     */
    404: unknown;
    /**
     * Failed to activate snapshot version
     */
    500: unknown;
};

export type PostApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivateResponses = {
    /**
     * Snapshot version activated successfully
     */
    200: ActivateSnapshotVersionResponse;
};

export type PostApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivateResponse = PostApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivateResponses[keyof PostApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivateResponses];

export type PostApiSandboxesStartData = {
    body: StartSandboxBody;
    path?: never;
    query?: never;
    url: '/api/sandboxes/start';
};

export type PostApiSandboxesStartErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Failed to start sandbox
     */
    500: unknown;
};

export type PostApiSandboxesStartResponses = {
    /**
     * Sandbox started successfully
     */
    200: StartSandboxResponse;
};

export type PostApiSandboxesStartResponse = PostApiSandboxesStartResponses[keyof PostApiSandboxesStartResponses];

export type PostApiSandboxesByIdEnvData = {
    body: UpdateSandboxEnvBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/sandboxes/{id}/env';
};

export type PostApiSandboxesByIdEnvErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Sandbox not found
     */
    404: unknown;
    /**
     * Failed to apply environment variables
     */
    500: unknown;
};

export type PostApiSandboxesByIdEnvResponses = {
    /**
     * Environment variables applied
     */
    200: UpdateSandboxEnvResponse;
};

export type PostApiSandboxesByIdEnvResponse = PostApiSandboxesByIdEnvResponses[keyof PostApiSandboxesByIdEnvResponses];

export type PostApiSandboxesByIdStopData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/sandboxes/{id}/stop';
};

export type PostApiSandboxesByIdStopErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Failed to stop sandbox
     */
    500: unknown;
};

export type PostApiSandboxesByIdStopResponses = {
    /**
     * Sandbox stopped
     */
    204: void;
};

export type PostApiSandboxesByIdStopResponse = PostApiSandboxesByIdStopResponses[keyof PostApiSandboxesByIdStopResponses];

export type GetApiSandboxesByIdStatusData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/sandboxes/{id}/status';
};

export type GetApiSandboxesByIdStatusErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Failed to get status
     */
    500: unknown;
};

export type GetApiSandboxesByIdStatusResponses = {
    /**
     * Sandbox status
     */
    200: {
        running: boolean;
        vscodeUrl?: string;
        workerUrl?: string;
        provider?: 'morph';
    };
};

export type GetApiSandboxesByIdStatusResponse = GetApiSandboxesByIdStatusResponses[keyof GetApiSandboxesByIdStatusResponses];

export type PostApiSandboxesByIdPublishDevcontainerData = {
    body: {
        teamSlugOrId: string;
        taskRunId: string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/api/sandboxes/{id}/publish-devcontainer';
};

export type PostApiSandboxesByIdPublishDevcontainerErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Failed to publish devcontainer networking
     */
    500: unknown;
};

export type PostApiSandboxesByIdPublishDevcontainerResponses = {
    /**
     * Exposed ports list
     */
    200: Array<{
        status?: 'running';
        port: number;
        url: string;
    }>;
};

export type PostApiSandboxesByIdPublishDevcontainerResponse = PostApiSandboxesByIdPublishDevcontainerResponses[keyof PostApiSandboxesByIdPublishDevcontainerResponses];

export type PostApiTeamsData = {
    body: CreateTeamRequest;
    path?: never;
    query?: never;
    url: '/api/teams';
};

export type PostApiTeamsErrors = {
    /**
     * Invalid input
     */
    400: CreateTeamErrorResponse;
    /**
     * Unauthorized
     */
    401: CreateTeamErrorResponse;
    /**
     * Slug conflict
     */
    409: CreateTeamErrorResponse;
    /**
     * Failed to create team
     */
    500: CreateTeamErrorResponse;
    /**
     * Timed out while syncing
     */
    504: CreateTeamErrorResponse;
};

export type PostApiTeamsError = PostApiTeamsErrors[keyof PostApiTeamsErrors];

export type PostApiTeamsResponses = {
    /**
     * Team created
     */
    201: CreateTeamResponse;
};

export type PostApiTeamsResponse = PostApiTeamsResponses[keyof PostApiTeamsResponses];

export type PostApiBranchesGenerateData = {
    body: GenerateBranchesBody;
    path?: never;
    query?: never;
    url: '/api/branches/generate';
};

export type PostApiBranchesGenerateErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Failed to generate branch names
     */
    500: unknown;
};

export type PostApiBranchesGenerateResponses = {
    /**
     * Generated branch metadata
     */
    200: GenerateBranchesResponse;
};

export type PostApiBranchesGenerateResponse = PostApiBranchesGenerateResponses[keyof PostApiBranchesGenerateResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};