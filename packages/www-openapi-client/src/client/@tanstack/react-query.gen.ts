// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getApiHealth, getApiUsers, postApiUsers, deleteApiUsersById, getApiUsersById, patchApiUsersById, getApiBooks, postApiBooks, getApiBooksById, postApiBooksByIdBorrow, postApiBooksByIdReturn, postApiDevServerStart, getApiIntegrationsGithubRepos, getApiIntegrationsGithubPrs, postApiIntegrationsGithubPrsBackfill, postApiIntegrationsGithubPrsBackfillRepo, getApiIntegrationsGithubPrsCode, postApiIntegrationsGithubPrsOpen, postApiIntegrationsGithubPrsMerge, postApiIntegrationsGithubPrsClose, postApiIntegrationsGithubPrsMergeSimple, getApiIntegrationsGithubPrsRaw, getApiIntegrationsGithubPrsFiles, getApiIntegrationsGithubPrsFileContents, postApiIntegrationsGithubPrsFileContentsBatch, postApiMorphSetupInstance, getApiEnvironments, postApiEnvironments, deleteApiEnvironmentsById, getApiEnvironmentsById, patchApiEnvironmentsById, getApiEnvironmentsByIdVars, patchApiEnvironmentsByIdPorts, getApiEnvironmentsByIdSnapshots, postApiEnvironmentsByIdSnapshots, postApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivate, postApiSandboxesStart, postApiSandboxesByIdEnv, postApiSandboxesByIdStop, getApiSandboxesByIdStatus, postApiSandboxesByIdPublishDevcontainer, postApiTeams, postApiBranchesGenerate, postApiCodeReviewStart } from '../sdk.gen.js';
import { queryOptions, infiniteQueryOptions, type InfiniteData, type DefaultError, type UseMutationOptions } from '@tanstack/react-query';
import type { GetApiHealthData, GetApiUsersData, GetApiUsersResponse, PostApiUsersData, PostApiUsersError, PostApiUsersResponse, DeleteApiUsersByIdData, DeleteApiUsersByIdError, DeleteApiUsersByIdResponse, GetApiUsersByIdData, PatchApiUsersByIdData, PatchApiUsersByIdError, PatchApiUsersByIdResponse, GetApiBooksData, PostApiBooksData, PostApiBooksError, PostApiBooksResponse, GetApiBooksByIdData, PostApiBooksByIdBorrowData, PostApiBooksByIdBorrowError, PostApiBooksByIdBorrowResponse, PostApiBooksByIdReturnData, PostApiBooksByIdReturnError, PostApiBooksByIdReturnResponse, PostApiDevServerStartData, PostApiDevServerStartError, PostApiDevServerStartResponse, GetApiIntegrationsGithubReposData, GetApiIntegrationsGithubReposResponse, GetApiIntegrationsGithubPrsData, GetApiIntegrationsGithubPrsResponse, PostApiIntegrationsGithubPrsBackfillData, PostApiIntegrationsGithubPrsBackfillRepoData, GetApiIntegrationsGithubPrsCodeData, PostApiIntegrationsGithubPrsOpenData, PostApiIntegrationsGithubPrsOpenResponse, PostApiIntegrationsGithubPrsMergeData, PostApiIntegrationsGithubPrsMergeResponse, PostApiIntegrationsGithubPrsCloseData, PostApiIntegrationsGithubPrsCloseResponse, PostApiIntegrationsGithubPrsMergeSimpleData, PostApiIntegrationsGithubPrsMergeSimpleResponse, GetApiIntegrationsGithubPrsRawData, GetApiIntegrationsGithubPrsFilesData, GetApiIntegrationsGithubPrsFileContentsData, PostApiIntegrationsGithubPrsFileContentsBatchData, PostApiIntegrationsGithubPrsFileContentsBatchResponse, PostApiMorphSetupInstanceData, PostApiMorphSetupInstanceResponse, GetApiEnvironmentsData, PostApiEnvironmentsData, PostApiEnvironmentsResponse, DeleteApiEnvironmentsByIdData, DeleteApiEnvironmentsByIdResponse, GetApiEnvironmentsByIdData, PatchApiEnvironmentsByIdData, PatchApiEnvironmentsByIdResponse, GetApiEnvironmentsByIdVarsData, PatchApiEnvironmentsByIdPortsData, PatchApiEnvironmentsByIdPortsResponse, GetApiEnvironmentsByIdSnapshotsData, PostApiEnvironmentsByIdSnapshotsData, PostApiEnvironmentsByIdSnapshotsResponse, PostApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivateData, PostApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivateResponse, PostApiSandboxesStartData, PostApiSandboxesStartResponse, PostApiSandboxesByIdEnvData, PostApiSandboxesByIdEnvResponse, PostApiSandboxesByIdStopData, PostApiSandboxesByIdStopResponse, GetApiSandboxesByIdStatusData, PostApiSandboxesByIdPublishDevcontainerData, PostApiSandboxesByIdPublishDevcontainerResponse, PostApiTeamsData, PostApiTeamsError, PostApiTeamsResponse, PostApiBranchesGenerateData, PostApiBranchesGenerateResponse, PostApiCodeReviewStartData, PostApiCodeReviewStartResponse } from '../types.gen.js';
import { client as _heyApiClient } from '../client.gen.js';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getApiHealthQueryKey = (options?: Options<GetApiHealthData>) => createQueryKey('getApiHealth', options);

/**
 * Health check endpoint
 */
export const getApiHealthOptions = (options?: Options<GetApiHealthData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiHealth({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiHealthQueryKey(options)
    });
};

export const getApiUsersQueryKey = (options?: Options<GetApiUsersData>) => createQueryKey('getApiUsers', options);

/**
 * List all users
 */
export const getApiUsersOptions = (options?: Options<GetApiUsersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUsersQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = {
        ...queryKey[0]
    };
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const getApiUsersInfiniteQueryKey = (options?: Options<GetApiUsersData>): QueryKey<Options<GetApiUsersData>> => createQueryKey('getApiUsers', options, true);

/**
 * List all users
 */
export const getApiUsersInfiniteOptions = (options?: Options<GetApiUsersData>) => {
    return infiniteQueryOptions<GetApiUsersResponse, DefaultError, InfiniteData<GetApiUsersResponse>, QueryKey<Options<GetApiUsersData>>, string | Pick<QueryKey<Options<GetApiUsersData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetApiUsersData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getApiUsers({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUsersInfiniteQueryKey(options)
    });
};

/**
 * Create a new user
 */
export const postApiUsersMutation = (options?: Partial<Options<PostApiUsersData>>): UseMutationOptions<PostApiUsersResponse, PostApiUsersError, Options<PostApiUsersData>> => {
    const mutationOptions: UseMutationOptions<PostApiUsersResponse, PostApiUsersError, Options<PostApiUsersData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiUsers({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete a user
 */
export const deleteApiUsersByIdMutation = (options?: Partial<Options<DeleteApiUsersByIdData>>): UseMutationOptions<DeleteApiUsersByIdResponse, DeleteApiUsersByIdError, Options<DeleteApiUsersByIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiUsersByIdResponse, DeleteApiUsersByIdError, Options<DeleteApiUsersByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteApiUsersById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiUsersByIdQueryKey = (options: Options<GetApiUsersByIdData>) => createQueryKey('getApiUsersById', options);

/**
 * Get a user by ID
 */
export const getApiUsersByIdOptions = (options: Options<GetApiUsersByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUsersById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUsersByIdQueryKey(options)
    });
};

/**
 * Update a user
 */
export const patchApiUsersByIdMutation = (options?: Partial<Options<PatchApiUsersByIdData>>): UseMutationOptions<PatchApiUsersByIdResponse, PatchApiUsersByIdError, Options<PatchApiUsersByIdData>> => {
    const mutationOptions: UseMutationOptions<PatchApiUsersByIdResponse, PatchApiUsersByIdError, Options<PatchApiUsersByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await patchApiUsersById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiBooksQueryKey = (options?: Options<GetApiBooksData>) => createQueryKey('getApiBooks', options);

/**
 * List all books
 */
export const getApiBooksOptions = (options?: Options<GetApiBooksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiBooks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiBooksQueryKey(options)
    });
};

/**
 * Add a new book
 */
export const postApiBooksMutation = (options?: Partial<Options<PostApiBooksData>>): UseMutationOptions<PostApiBooksResponse, PostApiBooksError, Options<PostApiBooksData>> => {
    const mutationOptions: UseMutationOptions<PostApiBooksResponse, PostApiBooksError, Options<PostApiBooksData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiBooks({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiBooksByIdQueryKey = (options: Options<GetApiBooksByIdData>) => createQueryKey('getApiBooksById', options);

/**
 * Get a book by ID
 */
export const getApiBooksByIdOptions = (options: Options<GetApiBooksByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiBooksById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiBooksByIdQueryKey(options)
    });
};

/**
 * Borrow a book
 */
export const postApiBooksByIdBorrowMutation = (options?: Partial<Options<PostApiBooksByIdBorrowData>>): UseMutationOptions<PostApiBooksByIdBorrowResponse, PostApiBooksByIdBorrowError, Options<PostApiBooksByIdBorrowData>> => {
    const mutationOptions: UseMutationOptions<PostApiBooksByIdBorrowResponse, PostApiBooksByIdBorrowError, Options<PostApiBooksByIdBorrowData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiBooksByIdBorrow({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Return a book
 */
export const postApiBooksByIdReturnMutation = (options?: Partial<Options<PostApiBooksByIdReturnData>>): UseMutationOptions<PostApiBooksByIdReturnResponse, PostApiBooksByIdReturnError, Options<PostApiBooksByIdReturnData>> => {
    const mutationOptions: UseMutationOptions<PostApiBooksByIdReturnResponse, PostApiBooksByIdReturnError, Options<PostApiBooksByIdReturnData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiBooksByIdReturn({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Start a new development server
 * Creates a new development server instance with VSCode and worker services for running tasks
 */
export const postApiDevServerStartMutation = (options?: Partial<Options<PostApiDevServerStartData>>): UseMutationOptions<PostApiDevServerStartResponse, PostApiDevServerStartError, Options<PostApiDevServerStartData>> => {
    const mutationOptions: UseMutationOptions<PostApiDevServerStartResponse, PostApiDevServerStartError, Options<PostApiDevServerStartData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiDevServerStart({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiIntegrationsGithubReposQueryKey = (options: Options<GetApiIntegrationsGithubReposData>) => createQueryKey('getApiIntegrationsGithubRepos', options);

/**
 * List repos per GitHub App installation for a team
 */
export const getApiIntegrationsGithubReposOptions = (options: Options<GetApiIntegrationsGithubReposData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiIntegrationsGithubRepos({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiIntegrationsGithubReposQueryKey(options)
    });
};

export const getApiIntegrationsGithubReposInfiniteQueryKey = (options: Options<GetApiIntegrationsGithubReposData>): QueryKey<Options<GetApiIntegrationsGithubReposData>> => createQueryKey('getApiIntegrationsGithubRepos', options, true);

/**
 * List repos per GitHub App installation for a team
 */
export const getApiIntegrationsGithubReposInfiniteOptions = (options: Options<GetApiIntegrationsGithubReposData>) => {
    return infiniteQueryOptions<GetApiIntegrationsGithubReposResponse, DefaultError, InfiniteData<GetApiIntegrationsGithubReposResponse>, QueryKey<Options<GetApiIntegrationsGithubReposData>>, number | Pick<QueryKey<Options<GetApiIntegrationsGithubReposData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetApiIntegrationsGithubReposData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getApiIntegrationsGithubRepos({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiIntegrationsGithubReposInfiniteQueryKey(options)
    });
};

export const getApiIntegrationsGithubPrsQueryKey = (options: Options<GetApiIntegrationsGithubPrsData>) => createQueryKey('getApiIntegrationsGithubPrs', options);

/**
 * List pull requests across a GitHub App installation for a team
 */
export const getApiIntegrationsGithubPrsOptions = (options: Options<GetApiIntegrationsGithubPrsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiIntegrationsGithubPrs({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiIntegrationsGithubPrsQueryKey(options)
    });
};

export const getApiIntegrationsGithubPrsInfiniteQueryKey = (options: Options<GetApiIntegrationsGithubPrsData>): QueryKey<Options<GetApiIntegrationsGithubPrsData>> => createQueryKey('getApiIntegrationsGithubPrs', options, true);

/**
 * List pull requests across a GitHub App installation for a team
 */
export const getApiIntegrationsGithubPrsInfiniteOptions = (options: Options<GetApiIntegrationsGithubPrsData>) => {
    return infiniteQueryOptions<GetApiIntegrationsGithubPrsResponse, DefaultError, InfiniteData<GetApiIntegrationsGithubPrsResponse>, QueryKey<Options<GetApiIntegrationsGithubPrsData>>, number | Pick<QueryKey<Options<GetApiIntegrationsGithubPrsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetApiIntegrationsGithubPrsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getApiIntegrationsGithubPrs({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiIntegrationsGithubPrsInfiniteQueryKey(options)
    });
};

/**
 * Backfill a single PR by URL and persist to Convex
 */
export const postApiIntegrationsGithubPrsBackfillMutation = (options?: Partial<Options<PostApiIntegrationsGithubPrsBackfillData>>): UseMutationOptions<unknown, DefaultError, Options<PostApiIntegrationsGithubPrsBackfillData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiIntegrationsGithubPrsBackfillData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiIntegrationsGithubPrsBackfill({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Backfill all PRs for a repo and persist to Convex
 */
export const postApiIntegrationsGithubPrsBackfillRepoMutation = (options?: Partial<Options<PostApiIntegrationsGithubPrsBackfillRepoData>>): UseMutationOptions<unknown, DefaultError, Options<PostApiIntegrationsGithubPrsBackfillRepoData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiIntegrationsGithubPrsBackfillRepoData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiIntegrationsGithubPrsBackfillRepo({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiIntegrationsGithubPrsCodeQueryKey = (options: Options<GetApiIntegrationsGithubPrsCodeData>) => createQueryKey('getApiIntegrationsGithubPrsCode', options);

/**
 * Fetch PR files, patches, and optional head contents
 */
export const getApiIntegrationsGithubPrsCodeOptions = (options: Options<GetApiIntegrationsGithubPrsCodeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiIntegrationsGithubPrsCode({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiIntegrationsGithubPrsCodeQueryKey(options)
    });
};

/**
 * Create or update GitHub pull requests for a task run using the user's GitHub OAuth token
 */
export const postApiIntegrationsGithubPrsOpenMutation = (options?: Partial<Options<PostApiIntegrationsGithubPrsOpenData>>): UseMutationOptions<PostApiIntegrationsGithubPrsOpenResponse, DefaultError, Options<PostApiIntegrationsGithubPrsOpenData>> => {
    const mutationOptions: UseMutationOptions<PostApiIntegrationsGithubPrsOpenResponse, DefaultError, Options<PostApiIntegrationsGithubPrsOpenData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiIntegrationsGithubPrsOpen({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Merge GitHub pull requests for a task run using the user's GitHub OAuth token
 */
export const postApiIntegrationsGithubPrsMergeMutation = (options?: Partial<Options<PostApiIntegrationsGithubPrsMergeData>>): UseMutationOptions<PostApiIntegrationsGithubPrsMergeResponse, DefaultError, Options<PostApiIntegrationsGithubPrsMergeData>> => {
    const mutationOptions: UseMutationOptions<PostApiIntegrationsGithubPrsMergeResponse, DefaultError, Options<PostApiIntegrationsGithubPrsMergeData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiIntegrationsGithubPrsMerge({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Close a GitHub pull request using the user's GitHub OAuth token
 */
export const postApiIntegrationsGithubPrsCloseMutation = (options?: Partial<Options<PostApiIntegrationsGithubPrsCloseData>>): UseMutationOptions<PostApiIntegrationsGithubPrsCloseResponse, DefaultError, Options<PostApiIntegrationsGithubPrsCloseData>> => {
    const mutationOptions: UseMutationOptions<PostApiIntegrationsGithubPrsCloseResponse, DefaultError, Options<PostApiIntegrationsGithubPrsCloseData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiIntegrationsGithubPrsClose({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Merge a GitHub pull request using the user's GitHub OAuth token
 */
export const postApiIntegrationsGithubPrsMergeSimpleMutation = (options?: Partial<Options<PostApiIntegrationsGithubPrsMergeSimpleData>>): UseMutationOptions<PostApiIntegrationsGithubPrsMergeSimpleResponse, DefaultError, Options<PostApiIntegrationsGithubPrsMergeSimpleData>> => {
    const mutationOptions: UseMutationOptions<PostApiIntegrationsGithubPrsMergeSimpleResponse, DefaultError, Options<PostApiIntegrationsGithubPrsMergeSimpleData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiIntegrationsGithubPrsMergeSimple({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiIntegrationsGithubPrsRawQueryKey = (options: Options<GetApiIntegrationsGithubPrsRawData>) => createQueryKey('getApiIntegrationsGithubPrsRaw', options);

/**
 * Fetch raw .patch or .diff for a PR (private repos supported)
 */
export const getApiIntegrationsGithubPrsRawOptions = (options: Options<GetApiIntegrationsGithubPrsRawData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiIntegrationsGithubPrsRaw({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiIntegrationsGithubPrsRawQueryKey(options)
    });
};

export const getApiIntegrationsGithubPrsFilesQueryKey = (options: Options<GetApiIntegrationsGithubPrsFilesData>) => createQueryKey('getApiIntegrationsGithubPrsFiles', options);

/**
 * List PR files without contents (fast)
 */
export const getApiIntegrationsGithubPrsFilesOptions = (options: Options<GetApiIntegrationsGithubPrsFilesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiIntegrationsGithubPrsFiles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiIntegrationsGithubPrsFilesQueryKey(options)
    });
};

export const getApiIntegrationsGithubPrsFileContentsQueryKey = (options: Options<GetApiIntegrationsGithubPrsFileContentsData>) => createQueryKey('getApiIntegrationsGithubPrsFileContents', options);

/**
 * Fetch base/head contents for a single file in a PR
 */
export const getApiIntegrationsGithubPrsFileContentsOptions = (options: Options<GetApiIntegrationsGithubPrsFileContentsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiIntegrationsGithubPrsFileContents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiIntegrationsGithubPrsFileContentsQueryKey(options)
    });
};

/**
 * Batch fetch base/head contents for many files in a PR using git blobs
 */
export const postApiIntegrationsGithubPrsFileContentsBatchMutation = (options?: Partial<Options<PostApiIntegrationsGithubPrsFileContentsBatchData>>): UseMutationOptions<PostApiIntegrationsGithubPrsFileContentsBatchResponse, DefaultError, Options<PostApiIntegrationsGithubPrsFileContentsBatchData>> => {
    const mutationOptions: UseMutationOptions<PostApiIntegrationsGithubPrsFileContentsBatchResponse, DefaultError, Options<PostApiIntegrationsGithubPrsFileContentsBatchData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiIntegrationsGithubPrsFileContentsBatch({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Setup a Morph instance with optional repository cloning
 */
export const postApiMorphSetupInstanceMutation = (options?: Partial<Options<PostApiMorphSetupInstanceData>>): UseMutationOptions<PostApiMorphSetupInstanceResponse, DefaultError, Options<PostApiMorphSetupInstanceData>> => {
    const mutationOptions: UseMutationOptions<PostApiMorphSetupInstanceResponse, DefaultError, Options<PostApiMorphSetupInstanceData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiMorphSetupInstance({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiEnvironmentsQueryKey = (options: Options<GetApiEnvironmentsData>) => createQueryKey('getApiEnvironments', options);

/**
 * List environments for a team
 */
export const getApiEnvironmentsOptions = (options: Options<GetApiEnvironmentsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiEnvironments({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiEnvironmentsQueryKey(options)
    });
};

/**
 * Create a new environment with snapshot
 */
export const postApiEnvironmentsMutation = (options?: Partial<Options<PostApiEnvironmentsData>>): UseMutationOptions<PostApiEnvironmentsResponse, DefaultError, Options<PostApiEnvironmentsData>> => {
    const mutationOptions: UseMutationOptions<PostApiEnvironmentsResponse, DefaultError, Options<PostApiEnvironmentsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiEnvironments({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete an environment
 */
export const deleteApiEnvironmentsByIdMutation = (options?: Partial<Options<DeleteApiEnvironmentsByIdData>>): UseMutationOptions<DeleteApiEnvironmentsByIdResponse, DefaultError, Options<DeleteApiEnvironmentsByIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiEnvironmentsByIdResponse, DefaultError, Options<DeleteApiEnvironmentsByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteApiEnvironmentsById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiEnvironmentsByIdQueryKey = (options: Options<GetApiEnvironmentsByIdData>) => createQueryKey('getApiEnvironmentsById', options);

/**
 * Get a specific environment
 */
export const getApiEnvironmentsByIdOptions = (options: Options<GetApiEnvironmentsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiEnvironmentsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiEnvironmentsByIdQueryKey(options)
    });
};

/**
 * Update environment metadata
 */
export const patchApiEnvironmentsByIdMutation = (options?: Partial<Options<PatchApiEnvironmentsByIdData>>): UseMutationOptions<PatchApiEnvironmentsByIdResponse, DefaultError, Options<PatchApiEnvironmentsByIdData>> => {
    const mutationOptions: UseMutationOptions<PatchApiEnvironmentsByIdResponse, DefaultError, Options<PatchApiEnvironmentsByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await patchApiEnvironmentsById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiEnvironmentsByIdVarsQueryKey = (options: Options<GetApiEnvironmentsByIdVarsData>) => createQueryKey('getApiEnvironmentsByIdVars', options);

/**
 * Get environment variables for a specific environment
 */
export const getApiEnvironmentsByIdVarsOptions = (options: Options<GetApiEnvironmentsByIdVarsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiEnvironmentsByIdVars({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiEnvironmentsByIdVarsQueryKey(options)
    });
};

/**
 * Update exposed ports for an environment
 */
export const patchApiEnvironmentsByIdPortsMutation = (options?: Partial<Options<PatchApiEnvironmentsByIdPortsData>>): UseMutationOptions<PatchApiEnvironmentsByIdPortsResponse, DefaultError, Options<PatchApiEnvironmentsByIdPortsData>> => {
    const mutationOptions: UseMutationOptions<PatchApiEnvironmentsByIdPortsResponse, DefaultError, Options<PatchApiEnvironmentsByIdPortsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await patchApiEnvironmentsByIdPorts({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiEnvironmentsByIdSnapshotsQueryKey = (options: Options<GetApiEnvironmentsByIdSnapshotsData>) => createQueryKey('getApiEnvironmentsByIdSnapshots', options);

/**
 * List snapshot versions for an environment
 */
export const getApiEnvironmentsByIdSnapshotsOptions = (options: Options<GetApiEnvironmentsByIdSnapshotsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiEnvironmentsByIdSnapshots({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiEnvironmentsByIdSnapshotsQueryKey(options)
    });
};

/**
 * Create a new snapshot version from a running instance
 */
export const postApiEnvironmentsByIdSnapshotsMutation = (options?: Partial<Options<PostApiEnvironmentsByIdSnapshotsData>>): UseMutationOptions<PostApiEnvironmentsByIdSnapshotsResponse, DefaultError, Options<PostApiEnvironmentsByIdSnapshotsData>> => {
    const mutationOptions: UseMutationOptions<PostApiEnvironmentsByIdSnapshotsResponse, DefaultError, Options<PostApiEnvironmentsByIdSnapshotsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiEnvironmentsByIdSnapshots({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Activate a snapshot version for an environment
 */
export const postApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivateMutation = (options?: Partial<Options<PostApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivateData>>): UseMutationOptions<PostApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivateResponse, DefaultError, Options<PostApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivateData>> => {
    const mutationOptions: UseMutationOptions<PostApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivateResponse, DefaultError, Options<PostApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Start a sandbox environment (Morph-backed)
 */
export const postApiSandboxesStartMutation = (options?: Partial<Options<PostApiSandboxesStartData>>): UseMutationOptions<PostApiSandboxesStartResponse, DefaultError, Options<PostApiSandboxesStartData>> => {
    const mutationOptions: UseMutationOptions<PostApiSandboxesStartResponse, DefaultError, Options<PostApiSandboxesStartData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiSandboxesStart({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Apply environment variables to a running sandbox
 */
export const postApiSandboxesByIdEnvMutation = (options?: Partial<Options<PostApiSandboxesByIdEnvData>>): UseMutationOptions<PostApiSandboxesByIdEnvResponse, DefaultError, Options<PostApiSandboxesByIdEnvData>> => {
    const mutationOptions: UseMutationOptions<PostApiSandboxesByIdEnvResponse, DefaultError, Options<PostApiSandboxesByIdEnvData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiSandboxesByIdEnv({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Stop or pause a sandbox instance
 */
export const postApiSandboxesByIdStopMutation = (options?: Partial<Options<PostApiSandboxesByIdStopData>>): UseMutationOptions<PostApiSandboxesByIdStopResponse, DefaultError, Options<PostApiSandboxesByIdStopData>> => {
    const mutationOptions: UseMutationOptions<PostApiSandboxesByIdStopResponse, DefaultError, Options<PostApiSandboxesByIdStopData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiSandboxesByIdStop({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiSandboxesByIdStatusQueryKey = (options: Options<GetApiSandboxesByIdStatusData>) => createQueryKey('getApiSandboxesByIdStatus', options);

/**
 * Get sandbox status and URLs
 */
export const getApiSandboxesByIdStatusOptions = (options: Options<GetApiSandboxesByIdStatusData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiSandboxesByIdStatus({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiSandboxesByIdStatusQueryKey(options)
    });
};

/**
 * Expose forwarded ports from devcontainer.json and persist networking info
 */
export const postApiSandboxesByIdPublishDevcontainerMutation = (options?: Partial<Options<PostApiSandboxesByIdPublishDevcontainerData>>): UseMutationOptions<PostApiSandboxesByIdPublishDevcontainerResponse, DefaultError, Options<PostApiSandboxesByIdPublishDevcontainerData>> => {
    const mutationOptions: UseMutationOptions<PostApiSandboxesByIdPublishDevcontainerResponse, DefaultError, Options<PostApiSandboxesByIdPublishDevcontainerData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiSandboxesByIdPublishDevcontainer({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Create a new team
 */
export const postApiTeamsMutation = (options?: Partial<Options<PostApiTeamsData>>): UseMutationOptions<PostApiTeamsResponse, PostApiTeamsError, Options<PostApiTeamsData>> => {
    const mutationOptions: UseMutationOptions<PostApiTeamsResponse, PostApiTeamsError, Options<PostApiTeamsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiTeams({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Generate git branch names for task runs
 */
export const postApiBranchesGenerateMutation = (options?: Partial<Options<PostApiBranchesGenerateData>>): UseMutationOptions<PostApiBranchesGenerateResponse, DefaultError, Options<PostApiBranchesGenerateData>> => {
    const mutationOptions: UseMutationOptions<PostApiBranchesGenerateResponse, DefaultError, Options<PostApiBranchesGenerateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiBranchesGenerate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Start an automated code review for a pull request
 */
export const postApiCodeReviewStartMutation = (options?: Partial<Options<PostApiCodeReviewStartData>>): UseMutationOptions<PostApiCodeReviewStartResponse, DefaultError, Options<PostApiCodeReviewStartData>> => {
    const mutationOptions: UseMutationOptions<PostApiCodeReviewStartResponse, DefaultError, Options<PostApiCodeReviewStartData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiCodeReviewStart({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};