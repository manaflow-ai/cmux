// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client/index.js';
import type { GetApiHealthData, GetApiHealthResponses, GetApiUsersData, GetApiUsersResponses, PostApiUsersData, PostApiUsersResponses, PostApiUsersErrors, DeleteApiUsersByIdData, DeleteApiUsersByIdResponses, DeleteApiUsersByIdErrors, GetApiUsersByIdData, GetApiUsersByIdResponses, GetApiUsersByIdErrors, PatchApiUsersByIdData, PatchApiUsersByIdResponses, PatchApiUsersByIdErrors, GetApiBooksData, GetApiBooksResponses, PostApiBooksData, PostApiBooksResponses, PostApiBooksErrors, GetApiBooksByIdData, GetApiBooksByIdResponses, GetApiBooksByIdErrors, PostApiBooksByIdBorrowData, PostApiBooksByIdBorrowResponses, PostApiBooksByIdBorrowErrors, PostApiBooksByIdReturnData, PostApiBooksByIdReturnResponses, PostApiBooksByIdReturnErrors, PostApiDevServerStartData, PostApiDevServerStartResponses, PostApiDevServerStartErrors, GetApiIntegrationsGithubReposData, GetApiIntegrationsGithubReposResponses, GetApiIntegrationsGithubReposErrors, GetApiIntegrationsGithubPrsData, GetApiIntegrationsGithubPrsResponses, GetApiIntegrationsGithubPrsErrors, PostApiIntegrationsGithubPrsBackfillData, PostApiIntegrationsGithubPrsBackfillResponses, PostApiIntegrationsGithubPrsBackfillErrors, PostApiIntegrationsGithubPrsBackfillRepoData, PostApiIntegrationsGithubPrsBackfillRepoResponses, PostApiIntegrationsGithubPrsBackfillRepoErrors, GetApiIntegrationsGithubPrsCodeData, GetApiIntegrationsGithubPrsCodeResponses, GetApiIntegrationsGithubPrsCodeErrors, PostApiIntegrationsGithubPrsOpenData, PostApiIntegrationsGithubPrsOpenResponses, PostApiIntegrationsGithubPrsOpenErrors, PostApiIntegrationsGithubPrsMergeData, PostApiIntegrationsGithubPrsMergeResponses, PostApiIntegrationsGithubPrsMergeErrors, PostApiIntegrationsGithubPrsCloseData, PostApiIntegrationsGithubPrsCloseResponses, PostApiIntegrationsGithubPrsCloseErrors, PostApiIntegrationsGithubPrsMergeSimpleData, PostApiIntegrationsGithubPrsMergeSimpleResponses, PostApiIntegrationsGithubPrsMergeSimpleErrors, GetApiIntegrationsGithubPrsRawData, GetApiIntegrationsGithubPrsRawResponses, GetApiIntegrationsGithubPrsRawErrors, GetApiIntegrationsGithubPrsFilesData, GetApiIntegrationsGithubPrsFilesResponses, GetApiIntegrationsGithubPrsFilesErrors, GetApiIntegrationsGithubPrsFileContentsData, GetApiIntegrationsGithubPrsFileContentsResponses, GetApiIntegrationsGithubPrsFileContentsErrors, PostApiIntegrationsGithubPrsFileContentsBatchData, PostApiIntegrationsGithubPrsFileContentsBatchResponses, PostApiIntegrationsGithubPrsFileContentsBatchErrors, PostApiMorphSetupInstanceData, PostApiMorphSetupInstanceResponses, PostApiMorphSetupInstanceErrors, PostApiPlanChatData, PostApiPlanChatResponses, PostApiPlanChatErrors, GetApiIframePreflightData, GetApiIframePreflightResponses, GetApiIframePreflightErrors, GetApiEnvironmentsData, GetApiEnvironmentsResponses, GetApiEnvironmentsErrors, PostApiEnvironmentsData, PostApiEnvironmentsResponses, PostApiEnvironmentsErrors, DeleteApiEnvironmentsByIdData, DeleteApiEnvironmentsByIdResponses, DeleteApiEnvironmentsByIdErrors, GetApiEnvironmentsByIdData, GetApiEnvironmentsByIdResponses, GetApiEnvironmentsByIdErrors, PatchApiEnvironmentsByIdData, PatchApiEnvironmentsByIdResponses, PatchApiEnvironmentsByIdErrors, GetApiEnvironmentsByIdVarsData, GetApiEnvironmentsByIdVarsResponses, GetApiEnvironmentsByIdVarsErrors, PatchApiEnvironmentsByIdPortsData, PatchApiEnvironmentsByIdPortsResponses, PatchApiEnvironmentsByIdPortsErrors, GetApiEnvironmentsByIdSnapshotsData, GetApiEnvironmentsByIdSnapshotsResponses, GetApiEnvironmentsByIdSnapshotsErrors, PostApiEnvironmentsByIdSnapshotsData, PostApiEnvironmentsByIdSnapshotsResponses, PostApiEnvironmentsByIdSnapshotsErrors, PostApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivateData, PostApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivateResponses, PostApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivateErrors, PostApiSandboxesStartData, PostApiSandboxesStartResponses, PostApiSandboxesStartErrors, PostApiSandboxesByIdEnvData, PostApiSandboxesByIdEnvResponses, PostApiSandboxesByIdEnvErrors, PostApiSandboxesByIdStopData, PostApiSandboxesByIdStopResponses, PostApiSandboxesByIdStopErrors, GetApiSandboxesByIdStatusData, GetApiSandboxesByIdStatusResponses, GetApiSandboxesByIdStatusErrors, PostApiSandboxesByIdPublishDevcontainerData, PostApiSandboxesByIdPublishDevcontainerResponses, PostApiSandboxesByIdPublishDevcontainerErrors, PostApiTeamsData, PostApiTeamsResponses, PostApiTeamsErrors, PostApiBranchesGenerateData, PostApiBranchesGenerateResponses, PostApiBranchesGenerateErrors, PostApiCodeReviewStartData, PostApiCodeReviewStartResponses, PostApiCodeReviewStartErrors } from './types.gen.js';
import { client as _heyApiClient } from './client.gen.js';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Health check endpoint
 */
export const getApiHealth = <ThrowOnError extends boolean = false>(options?: Options<GetApiHealthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiHealthResponses, unknown, ThrowOnError>({
        url: '/api/health',
        ...options
    });
};

/**
 * List all users
 */
export const getApiUsers = <ThrowOnError extends boolean = false>(options?: Options<GetApiUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiUsersResponses, unknown, ThrowOnError>({
        url: '/api/users',
        ...options
    });
};

/**
 * Create a new user
 */
export const postApiUsers = <ThrowOnError extends boolean = false>(options: Options<PostApiUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiUsersResponses, PostApiUsersErrors, ThrowOnError>({
        url: '/api/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a user
 */
export const deleteApiUsersById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiUsersByIdResponses, DeleteApiUsersByIdErrors, ThrowOnError>({
        url: '/api/users/{id}',
        ...options
    });
};

/**
 * Get a user by ID
 */
export const getApiUsersById = <ThrowOnError extends boolean = false>(options: Options<GetApiUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiUsersByIdResponses, GetApiUsersByIdErrors, ThrowOnError>({
        url: '/api/users/{id}',
        ...options
    });
};

/**
 * Update a user
 */
export const patchApiUsersById = <ThrowOnError extends boolean = false>(options: Options<PatchApiUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiUsersByIdResponses, PatchApiUsersByIdErrors, ThrowOnError>({
        url: '/api/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all books
 */
export const getApiBooks = <ThrowOnError extends boolean = false>(options?: Options<GetApiBooksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiBooksResponses, unknown, ThrowOnError>({
        url: '/api/books',
        ...options
    });
};

/**
 * Add a new book
 */
export const postApiBooks = <ThrowOnError extends boolean = false>(options: Options<PostApiBooksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiBooksResponses, PostApiBooksErrors, ThrowOnError>({
        url: '/api/books',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get a book by ID
 */
export const getApiBooksById = <ThrowOnError extends boolean = false>(options: Options<GetApiBooksByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiBooksByIdResponses, GetApiBooksByIdErrors, ThrowOnError>({
        url: '/api/books/{id}',
        ...options
    });
};

/**
 * Borrow a book
 */
export const postApiBooksByIdBorrow = <ThrowOnError extends boolean = false>(options: Options<PostApiBooksByIdBorrowData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiBooksByIdBorrowResponses, PostApiBooksByIdBorrowErrors, ThrowOnError>({
        url: '/api/books/{id}/borrow',
        ...options
    });
};

/**
 * Return a book
 */
export const postApiBooksByIdReturn = <ThrowOnError extends boolean = false>(options: Options<PostApiBooksByIdReturnData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiBooksByIdReturnResponses, PostApiBooksByIdReturnErrors, ThrowOnError>({
        url: '/api/books/{id}/return',
        ...options
    });
};

/**
 * Start a new development server
 * Creates a new development server instance with VSCode and worker services for running tasks
 */
export const postApiDevServerStart = <ThrowOnError extends boolean = false>(options: Options<PostApiDevServerStartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiDevServerStartResponses, PostApiDevServerStartErrors, ThrowOnError>({
        url: '/api/dev-server/start',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List repos per GitHub App installation for a team
 */
export const getApiIntegrationsGithubRepos = <ThrowOnError extends boolean = false>(options: Options<GetApiIntegrationsGithubReposData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiIntegrationsGithubReposResponses, GetApiIntegrationsGithubReposErrors, ThrowOnError>({
        url: '/api/integrations/github/repos',
        ...options
    });
};

/**
 * List pull requests across a GitHub App installation for a team
 */
export const getApiIntegrationsGithubPrs = <ThrowOnError extends boolean = false>(options: Options<GetApiIntegrationsGithubPrsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiIntegrationsGithubPrsResponses, GetApiIntegrationsGithubPrsErrors, ThrowOnError>({
        url: '/api/integrations/github/prs',
        ...options
    });
};

/**
 * Backfill a single PR by URL and persist to Convex
 */
export const postApiIntegrationsGithubPrsBackfill = <ThrowOnError extends boolean = false>(options: Options<PostApiIntegrationsGithubPrsBackfillData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiIntegrationsGithubPrsBackfillResponses, PostApiIntegrationsGithubPrsBackfillErrors, ThrowOnError>({
        url: '/api/integrations/github/prs/backfill',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Backfill all PRs for a repo and persist to Convex
 */
export const postApiIntegrationsGithubPrsBackfillRepo = <ThrowOnError extends boolean = false>(options: Options<PostApiIntegrationsGithubPrsBackfillRepoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiIntegrationsGithubPrsBackfillRepoResponses, PostApiIntegrationsGithubPrsBackfillRepoErrors, ThrowOnError>({
        url: '/api/integrations/github/prs/backfill-repo',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch PR files, patches, and optional head contents
 */
export const getApiIntegrationsGithubPrsCode = <ThrowOnError extends boolean = false>(options: Options<GetApiIntegrationsGithubPrsCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiIntegrationsGithubPrsCodeResponses, GetApiIntegrationsGithubPrsCodeErrors, ThrowOnError>({
        url: '/api/integrations/github/prs/code',
        ...options
    });
};

/**
 * Create or update GitHub pull requests for a task run using the user's GitHub OAuth token
 */
export const postApiIntegrationsGithubPrsOpen = <ThrowOnError extends boolean = false>(options: Options<PostApiIntegrationsGithubPrsOpenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiIntegrationsGithubPrsOpenResponses, PostApiIntegrationsGithubPrsOpenErrors, ThrowOnError>({
        url: '/api/integrations/github/prs/open',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Merge GitHub pull requests for a task run using the user's GitHub OAuth token
 */
export const postApiIntegrationsGithubPrsMerge = <ThrowOnError extends boolean = false>(options: Options<PostApiIntegrationsGithubPrsMergeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiIntegrationsGithubPrsMergeResponses, PostApiIntegrationsGithubPrsMergeErrors, ThrowOnError>({
        url: '/api/integrations/github/prs/merge',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Close a GitHub pull request using the user's GitHub OAuth token
 */
export const postApiIntegrationsGithubPrsClose = <ThrowOnError extends boolean = false>(options: Options<PostApiIntegrationsGithubPrsCloseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiIntegrationsGithubPrsCloseResponses, PostApiIntegrationsGithubPrsCloseErrors, ThrowOnError>({
        url: '/api/integrations/github/prs/close',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Merge a GitHub pull request using the user's GitHub OAuth token
 */
export const postApiIntegrationsGithubPrsMergeSimple = <ThrowOnError extends boolean = false>(options: Options<PostApiIntegrationsGithubPrsMergeSimpleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiIntegrationsGithubPrsMergeSimpleResponses, PostApiIntegrationsGithubPrsMergeSimpleErrors, ThrowOnError>({
        url: '/api/integrations/github/prs/merge-simple',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch raw .patch or .diff for a PR (private repos supported)
 */
export const getApiIntegrationsGithubPrsRaw = <ThrowOnError extends boolean = false>(options: Options<GetApiIntegrationsGithubPrsRawData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiIntegrationsGithubPrsRawResponses, GetApiIntegrationsGithubPrsRawErrors, ThrowOnError>({
        url: '/api/integrations/github/prs/raw',
        ...options
    });
};

/**
 * List PR files without contents (fast)
 */
export const getApiIntegrationsGithubPrsFiles = <ThrowOnError extends boolean = false>(options: Options<GetApiIntegrationsGithubPrsFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiIntegrationsGithubPrsFilesResponses, GetApiIntegrationsGithubPrsFilesErrors, ThrowOnError>({
        url: '/api/integrations/github/prs/files',
        ...options
    });
};

/**
 * Fetch base/head contents for a single file in a PR
 */
export const getApiIntegrationsGithubPrsFileContents = <ThrowOnError extends boolean = false>(options: Options<GetApiIntegrationsGithubPrsFileContentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiIntegrationsGithubPrsFileContentsResponses, GetApiIntegrationsGithubPrsFileContentsErrors, ThrowOnError>({
        url: '/api/integrations/github/prs/file-contents',
        ...options
    });
};

/**
 * Batch fetch base/head contents for many files in a PR using git blobs
 */
export const postApiIntegrationsGithubPrsFileContentsBatch = <ThrowOnError extends boolean = false>(options: Options<PostApiIntegrationsGithubPrsFileContentsBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiIntegrationsGithubPrsFileContentsBatchResponses, PostApiIntegrationsGithubPrsFileContentsBatchErrors, ThrowOnError>({
        url: '/api/integrations/github/prs/file-contents/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Setup a Morph instance with optional repository cloning
 */
export const postApiMorphSetupInstance = <ThrowOnError extends boolean = false>(options: Options<PostApiMorphSetupInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiMorphSetupInstanceResponses, PostApiMorphSetupInstanceErrors, ThrowOnError>({
        url: '/api/morph/setup-instance',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Generate a planning response for Plan Mode
 */
export const postApiPlanChat = <ThrowOnError extends boolean = false>(options: Options<PostApiPlanChatData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiPlanChatResponses, PostApiPlanChatErrors, ThrowOnError>({
        url: '/api/plan/chat',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Validate iframe target availability via server-side preflight.
 */
export const getApiIframePreflight = <ThrowOnError extends boolean = false>(options: Options<GetApiIframePreflightData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).sse.get<GetApiIframePreflightResponses, GetApiIframePreflightErrors, ThrowOnError>({
        url: '/api/iframe/preflight',
        ...options
    });
};

/**
 * List environments for a team
 */
export const getApiEnvironments = <ThrowOnError extends boolean = false>(options: Options<GetApiEnvironmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiEnvironmentsResponses, GetApiEnvironmentsErrors, ThrowOnError>({
        url: '/api/environments',
        ...options
    });
};

/**
 * Create a new environment with snapshot
 */
export const postApiEnvironments = <ThrowOnError extends boolean = false>(options: Options<PostApiEnvironmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiEnvironmentsResponses, PostApiEnvironmentsErrors, ThrowOnError>({
        url: '/api/environments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete an environment
 */
export const deleteApiEnvironmentsById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiEnvironmentsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiEnvironmentsByIdResponses, DeleteApiEnvironmentsByIdErrors, ThrowOnError>({
        url: '/api/environments/{id}',
        ...options
    });
};

/**
 * Get a specific environment
 */
export const getApiEnvironmentsById = <ThrowOnError extends boolean = false>(options: Options<GetApiEnvironmentsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiEnvironmentsByIdResponses, GetApiEnvironmentsByIdErrors, ThrowOnError>({
        url: '/api/environments/{id}',
        ...options
    });
};

/**
 * Update environment metadata
 */
export const patchApiEnvironmentsById = <ThrowOnError extends boolean = false>(options: Options<PatchApiEnvironmentsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiEnvironmentsByIdResponses, PatchApiEnvironmentsByIdErrors, ThrowOnError>({
        url: '/api/environments/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get environment variables for a specific environment
 */
export const getApiEnvironmentsByIdVars = <ThrowOnError extends boolean = false>(options: Options<GetApiEnvironmentsByIdVarsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiEnvironmentsByIdVarsResponses, GetApiEnvironmentsByIdVarsErrors, ThrowOnError>({
        url: '/api/environments/{id}/vars',
        ...options
    });
};

/**
 * Update exposed ports for an environment
 */
export const patchApiEnvironmentsByIdPorts = <ThrowOnError extends boolean = false>(options: Options<PatchApiEnvironmentsByIdPortsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiEnvironmentsByIdPortsResponses, PatchApiEnvironmentsByIdPortsErrors, ThrowOnError>({
        url: '/api/environments/{id}/ports',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List snapshot versions for an environment
 */
export const getApiEnvironmentsByIdSnapshots = <ThrowOnError extends boolean = false>(options: Options<GetApiEnvironmentsByIdSnapshotsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiEnvironmentsByIdSnapshotsResponses, GetApiEnvironmentsByIdSnapshotsErrors, ThrowOnError>({
        url: '/api/environments/{id}/snapshots',
        ...options
    });
};

/**
 * Create a new snapshot version from a running instance
 */
export const postApiEnvironmentsByIdSnapshots = <ThrowOnError extends boolean = false>(options: Options<PostApiEnvironmentsByIdSnapshotsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiEnvironmentsByIdSnapshotsResponses, PostApiEnvironmentsByIdSnapshotsErrors, ThrowOnError>({
        url: '/api/environments/{id}/snapshots',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Activate a snapshot version for an environment
 */
export const postApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivate = <ThrowOnError extends boolean = false>(options: Options<PostApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivateResponses, PostApiEnvironmentsByIdSnapshotsBySnapshotVersionIdActivateErrors, ThrowOnError>({
        url: '/api/environments/{id}/snapshots/{snapshotVersionId}/activate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Start a sandbox environment (Morph-backed)
 */
export const postApiSandboxesStart = <ThrowOnError extends boolean = false>(options: Options<PostApiSandboxesStartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiSandboxesStartResponses, PostApiSandboxesStartErrors, ThrowOnError>({
        url: '/api/sandboxes/start',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Apply environment variables to a running sandbox
 */
export const postApiSandboxesByIdEnv = <ThrowOnError extends boolean = false>(options: Options<PostApiSandboxesByIdEnvData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiSandboxesByIdEnvResponses, PostApiSandboxesByIdEnvErrors, ThrowOnError>({
        url: '/api/sandboxes/{id}/env',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Stop or pause a sandbox instance
 */
export const postApiSandboxesByIdStop = <ThrowOnError extends boolean = false>(options: Options<PostApiSandboxesByIdStopData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiSandboxesByIdStopResponses, PostApiSandboxesByIdStopErrors, ThrowOnError>({
        url: '/api/sandboxes/{id}/stop',
        ...options
    });
};

/**
 * Get sandbox status and URLs
 */
export const getApiSandboxesByIdStatus = <ThrowOnError extends boolean = false>(options: Options<GetApiSandboxesByIdStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiSandboxesByIdStatusResponses, GetApiSandboxesByIdStatusErrors, ThrowOnError>({
        url: '/api/sandboxes/{id}/status',
        ...options
    });
};

/**
 * Expose forwarded ports from devcontainer.json and persist networking info
 */
export const postApiSandboxesByIdPublishDevcontainer = <ThrowOnError extends boolean = false>(options: Options<PostApiSandboxesByIdPublishDevcontainerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiSandboxesByIdPublishDevcontainerResponses, PostApiSandboxesByIdPublishDevcontainerErrors, ThrowOnError>({
        url: '/api/sandboxes/{id}/publish-devcontainer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a new team
 */
export const postApiTeams = <ThrowOnError extends boolean = false>(options: Options<PostApiTeamsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiTeamsResponses, PostApiTeamsErrors, ThrowOnError>({
        url: '/api/teams',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Generate git branch names for task runs
 */
export const postApiBranchesGenerate = <ThrowOnError extends boolean = false>(options: Options<PostApiBranchesGenerateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiBranchesGenerateResponses, PostApiBranchesGenerateErrors, ThrowOnError>({
        url: '/api/branches/generate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Start an automated code review for a pull request
 */
export const postApiCodeReviewStart = <ThrowOnError extends boolean = false>(options: Options<PostApiCodeReviewStartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiCodeReviewStartResponses, PostApiCodeReviewStartErrors, ThrowOnError>({
        url: '/api/code-review/start',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};